//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LeaderBoardClient.ServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CreatePublicContest", ReplyAction="http://tempuri.org/IService/CreatePublicContestResponse")]
        int CreatePublicContest();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CreatePublicContest", ReplyAction="http://tempuri.org/IService/CreatePublicContestResponse")]
        System.Threading.Tasks.Task<int> CreatePublicContestAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CreatePrivateContest", ReplyAction="http://tempuri.org/IService/CreatePrivateContestResponse")]
        int CreatePrivateContest();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CreatePrivateContest", ReplyAction="http://tempuri.org/IService/CreatePrivateContestResponse")]
        System.Threading.Tasks.Task<int> CreatePrivateContestAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllPubicContest", ReplyAction="http://tempuri.org/IService/GetAllPubicContestResponse")]
        int[] GetAllPubicContest();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllPubicContest", ReplyAction="http://tempuri.org/IService/GetAllPubicContestResponse")]
        System.Threading.Tasks.Task<int[]> GetAllPubicContestAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllPrivateContest", ReplyAction="http://tempuri.org/IService/GetAllPrivateContestResponse")]
        int[] GetAllPrivateContest();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllPrivateContest", ReplyAction="http://tempuri.org/IService/GetAllPrivateContestResponse")]
        System.Threading.Tasks.Task<int[]> GetAllPrivateContestAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetContest", ReplyAction="http://tempuri.org/IService/GetContestResponse")]
        System.Collections.Generic.Dictionary<int, int> GetContest(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetContest", ReplyAction="http://tempuri.org/IService/GetContestResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, int>> GetContestAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddPlayer", ReplyAction="http://tempuri.org/IService/AddPlayerResponse")]
        int AddPlayer(int contestID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddPlayer", ReplyAction="http://tempuri.org/IService/AddPlayerResponse")]
        System.Threading.Tasks.Task<int> AddPlayerAsync(int contestID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateScore", ReplyAction="http://tempuri.org/IService/UpdateScoreResponse")]
        void UpdateScore(int contestid, int playerid, int score);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateScore", ReplyAction="http://tempuri.org/IService/UpdateScoreResponse")]
        System.Threading.Tasks.Task UpdateScoreAsync(int contestid, int playerid, int score);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllPlayers", ReplyAction="http://tempuri.org/IService/GetAllPlayersResponse")]
        int[] GetAllPlayers(int contestid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllPlayers", ReplyAction="http://tempuri.org/IService/GetAllPlayersResponse")]
        System.Threading.Tasks.Task<int[]> GetAllPlayersAsync(int contestid);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : LeaderBoardClient.ServiceReference.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<LeaderBoardClient.ServiceReference.IService>, LeaderBoardClient.ServiceReference.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int CreatePublicContest() {
            return base.Channel.CreatePublicContest();
        }
        
        public System.Threading.Tasks.Task<int> CreatePublicContestAsync() {
            return base.Channel.CreatePublicContestAsync();
        }
        
        public int CreatePrivateContest() {
            return base.Channel.CreatePrivateContest();
        }
        
        public System.Threading.Tasks.Task<int> CreatePrivateContestAsync() {
            return base.Channel.CreatePrivateContestAsync();
        }
        
        public int[] GetAllPubicContest() {
            return base.Channel.GetAllPubicContest();
        }
        
        public System.Threading.Tasks.Task<int[]> GetAllPubicContestAsync() {
            return base.Channel.GetAllPubicContestAsync();
        }
        
        public int[] GetAllPrivateContest() {
            return base.Channel.GetAllPrivateContest();
        }
        
        public System.Threading.Tasks.Task<int[]> GetAllPrivateContestAsync() {
            return base.Channel.GetAllPrivateContestAsync();
        }
        
        public System.Collections.Generic.Dictionary<int, int> GetContest(int id) {
            return base.Channel.GetContest(id);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, int>> GetContestAsync(int id) {
            return base.Channel.GetContestAsync(id);
        }
        
        public int AddPlayer(int contestID) {
            return base.Channel.AddPlayer(contestID);
        }
        
        public System.Threading.Tasks.Task<int> AddPlayerAsync(int contestID) {
            return base.Channel.AddPlayerAsync(contestID);
        }
        
        public void UpdateScore(int contestid, int playerid, int score) {
            base.Channel.UpdateScore(contestid, playerid, score);
        }
        
        public System.Threading.Tasks.Task UpdateScoreAsync(int contestid, int playerid, int score) {
            return base.Channel.UpdateScoreAsync(contestid, playerid, score);
        }
        
        public int[] GetAllPlayers(int contestid) {
            return base.Channel.GetAllPlayers(contestid);
        }
        
        public System.Threading.Tasks.Task<int[]> GetAllPlayersAsync(int contestid) {
            return base.Channel.GetAllPlayersAsync(contestid);
        }
    }
}
